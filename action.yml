name: 'Dokploy Deployment'
description: 'Trigger a Dokploy deployment'
branding:
  icon: 'upload-cloud'
  color: 'gray-dark'
inputs:
  dokploy_url:
    description: 'Dokploy base URL, e.g. https://dokploy.example.com'
    required: true
  auth_token:
    description: 'Dokploy authentication token'
    required: true
  application_id:
    description: 'Dokploy application ID'
    required: true
  wait_for_completion:
    description: 'Wait for deployment to finish (default: false)'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - name: Trigger Dokploy deployment
      shell: bash
      env:
        DOKPLOY_URL: ${{ inputs.dokploy_url }}
        DOKPLOY_AUTH_TOKEN: ${{ inputs.auth_token }}
        DOKPLOY_APPLICATION_ID: ${{ inputs.application_id }}
        WAIT_FOR_COMPLETION: ${{ inputs.wait_for_completion }}
        SKIP_DEPLOY: ${{ inputs.skip_deploy || 'false' }}

      run: |
        # Function to check deployment status with timeout
        check_deployment_status() {
          local timeout=${1:-600}  # Default 10 minutes
          local operation_name=${2:-"deployment"}
          local initial_sleep=${3:-10}
          local status_field=${4:-"dep_status"}

          echo "Waiting for $initial_sleep seconds for $operation_name to complete..."
          sleep $initial_sleep

          local elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            # Get application status
            application_response=$(curl -X 'GET' \
              "$DOKPLOY_URL/api/application.one?applicationId=$DOKPLOY_APPLICATION_ID" \
              -H 'accept: application/json' \
              -H "x-api-key: $DOKPLOY_AUTH_TOKEN" \
              -s)
            
            if [ $? -ne 0 ]; then
              echo "Failed to fetch application status"
              exit 1
            fi
            
            # Extract the appropriate status field
            if [ "$status_field" = "dep_status" ]; then
              latest_status=$(echo "$application_response" | jq -r '.deployments[-1].status // "unknown"')
            elif [ "$status_field" = "status" ]; then
              latest_status=$(echo "$application_response" | jq -r '.applicationStatus // "unknown"')
            else
              echo "Unknown status field: $status_field"
              exit 1
            fi
            
            if [ "$latest_status" = "unknown" ] || [ "$latest_status" = "null" ]; then
              echo "Could not determine $operation_name status"
              exit 1
            fi
            
            echo "Current $operation_name status: $latest_status after $elapsed seconds"
            
            case "$latest_status" in
              "done")
                echo "$operation_name completed successfully!"
                return 0
                ;;
              "error")
                echo "$operation_name failed with error status"
                exit 1
                ;;
              "idle")
                echo "$operation_name idle, waiting..."
                sleep 1
                elapsed=$((elapsed + 1))
                ;;
              "running")
                echo "$operation_name still running, waiting..."
                sleep 1
                elapsed=$((elapsed + 1))
                ;;
              *)
                echo "Unknown $operation_name status: $latest_status"
                sleep 1
                elapsed=$((elapsed + 1))
                ;;
            esac
          done
          
          echo "$operation_name timeout reached ($timeout seconds). Current status: $latest_status"
          exit 1
        }

        if [ "$SKIP_DEPLOY" = "true" ]; then
          echo "Skipping deployment as per SKIP_DEPLOY flag"

        else
          echo "Triggering deployment for application ID: $DOKPLOY_APPLICATION_ID"
          
          response=$(curl -X 'POST' \
            "$DOKPLOY_URL/api/application.deploy" \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -H "x-api-key: $DOKPLOY_AUTH_TOKEN" \
            -d "{\"applicationId\": \"$DOKPLOY_APPLICATION_ID\"}" \
            -w "%{http_code}" \
            -o /dev/null \
            -s)
          
          if [ "$response" -ne 200 ]; then
            echo "Deployment failed with status code: $response"
            exit 1
          fi
          
          echo "Deployment triggered successfully"
        fi
        
        # Wait for completion if requested
        if [ "$WAIT_FOR_COMPLETION" = "true" ]; then
          # Check deployment status
          # check_deployment_status 600 "deployment" 10 "dep_status"
          check_deployment_status 600 "deployment" 30 "status"
          
          # Trigger reload after deployment completes
          echo "Triggering application reload..."

          reload_response=$(curl -X 'POST' \
            "$DOKPLOY_URL/api/application.reload" \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -H "x-api-key: $DOKPLOY_AUTH_TOKEN" \
            -d "{\"applicationId\": \"$DOKPLOY_APPLICATION_ID\", \"appName\": \"$DOKPLOY_APPLICATION_ID\"}" \
            -w "%{http_code}" \
            -o /dev/null \
            -s)

          if [ "$reload_response" -ne 200 ]; then
            echo "Reload failed with status code: $reload_response"
            exit 1
          fi

          echo "Application reload triggered successfully"
          
          # Check deployment status again after reload
          check_deployment_status 600 "reload" 10 "status"
          
          echo "Deployment and reload finished successfully"
        fi
